// Adapted from https://github.com/eclipse/buildship/blob/master/build.gradle

import eclipsebuild.*
import org.gradle.internal.os.OperatingSystem
import java.util.regex.*

buildscript {
	repositories {
		jcenter()
		maven {
		  url "https://plugins.gradle.org/m2/"
		}
		ivy {
			// See http://download.eclipse.org/eclipse/downloads/
			// This is 4.6.2 (Neon.2)
			url "https://repo.gradle.org/gradle/tooling-libs-releases-local/com/gradleware/tooling/p2-repository/0.17.0/p2-repository-0.17.0.zip!/"
			layout "pattern", { artifact "[organization]/[artifact]_[revision].[ext]" }
		}
	}
	dependencies {
		classpath 'org.xtext:xtext-gradle-plugin:1.0.17'
		classpath 'org.xtext:xtext-idea-gradle-plugin:1.0.17'
		classpath 'plugins:com.gradleware.tooling.model:0.17.0.v20170103170240'
	}
}

plugins {
    id 'com.gradle.build-scan' version '1.1.1'
    
    // https://github.com/bintray/gradle-bintray-plugin#step-2-apply-the-plugin-to-your-gradle-build-script
    id "com.jfrog.bintray" version "1.7.3"
}

buildScan {
    server = "https://e.grdev.net"
}

apply plugin: eclipsebuild.BuildDefinitionPlugin

ext.toolingCommonsBundleVersion = toolingCommonsVersion
ext.toolingApiBundleVersion = toolingApiVersion

// define version mapping for the 3rd-party dependencies that are not specific to a particular Eclipse version
def eclipseVersionAgnosticDependencies = [
    'com.gradleware.tooling.utils'		: toolingCommonsBundleVersion,
    'com.gradleware.tooling.client'    	: toolingCommonsBundleVersion,
    'com.gradleware.tooling.model'      	: toolingCommonsBundleVersion,
    'org.gradle.toolingapi'             	: toolingApiBundleVersion,
    'org.slf4j.api'                     	: '1.7.2',
    'org.slf4j.simple'                  	: '1.7.2',
    'com.google.guava'                  	: '15.0.0',
    'com.google.gson'                   	: '2.2.4',
    'org.junit'                         	: '4.12.0',
    'org.apache.log4j'                  	: '1.2.15',
    'org.eclipse.swtbot.eclipse.finder' 	: '2.2.1',
    'org.eclipse.swtbot.junit4_x'       	: '2.2.1',
]


// To avoid complication with legacy versions, use 46 as the minimum version.
// The version can be overridden through -Peclipse.version=<version>
// also the target platforms contain 
// 1) the Eclipse SDK
// 2) the latest junit 
// 3) SWTBot 2.2.1
eclipseBuild {
    defaultEclipseVersion = '46'

    final def swtPluginId = "org.eclipse.swt.${ECLIPSE_WS}.${ECLIPSE_OS}.${ECLIPSE_ARCH}"

    targetPlatform {
        eclipseVersion = '46'
        targetDefinition = file('tooling-e46.target')
        // TODO define version mapping similarly as above; it makes dependency resolution faster
        versionMapping = eclipseVersionAgnosticDependencies
    }
}

// instead of reading the current version from an external file and add a timestamp suffix if requested by the caller
// version = file('version.txt').text.trim()
// get the version from either gradle.properties or from the command line via -Pversion=...
version = "${version}"

// read xtext version from an external file
ext.xtextVersion = file('xtextVersion.txt').text.trim()

// ensure that the assembleTargetPlatform is executed when the gradle.properties file is changed
project.assembleTargetPlatform.inputs.file file('gradle.properties')


subprojects { subproject ->
    if (!subproject.name.endsWith("doc") && 
		!subproject.name.endsWith("feature") &&
		!subproject.name.endsWith("target")) {    
		
		apply plugin: 'org.xtext.xtend'
		apply plugin: 'java'
		apply plugin: 'eclipse'
		apply plugin: 'idea'
		apply plugin: 'maven'
		
		sourceCompatibility = '1.8'
		targetCompatibility = '1.8'
		
		eclipse {
			pathVariables 'GRADLE_HOME': gradle.gradleUserHomeDir

			classpath {
			   defaultOutputDir = file('build/target/classes/main/')
			   downloadSources=true
			   downloadJavadoc=true
			}
		}
		
		jar {
			from('model') {
				into('model')
			}
			manifest {
				attributes 'Bundle-SymbolicName': project.name
			}
		}
		
    }
}

subprojects {

    // set the calculated version on all projects in the hierarchy
    version = rootProject.version
	
	ext.xtextVersion = rootProject.xtextVersion
	
	apply from: "${rootDir}/gradle/source-layout.gradle"
	apply from: "${rootDir}/gradle/maven-deployment.gradle"
	
	group = 'jpl.imce.oml.specification'
	
	configurations.all {
		exclude group: 'asm'
	}
	
	repositories {
		// the gradle xtext plugin injects a dependency:
		// org.eclipse.xtend:org.eclipse.xtend.core:${xtextVersion}
		// also, it looks at the META-INF/MANIFEST.MF; and appends a "+" to dependencies.
		// so for antlr, we can't add an explicit dependency: org.antlr.runtime:3.2.0 
		// because the gradle xtext plugin would change it to an unresolvable dependency: org.antlr.runtime:3.2.0+
        mavenCentral()
        
	    maven {
	      url "file:${Config.on(rootProject).mavenizedTargetPlatformDir}"
	    }
	}
	
    
}
